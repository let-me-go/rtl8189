#include "sdc.h"
#include "sdcard.h"

void SDCard_ResetCard(Sdc_Object* sdc_obj)
{
	//set slower clock for reset card
	SDC_UpdateClockRegister(sdc_obj, SDC_CLOCK_IN >>1);
	//SDC_UpdateClockRegister(sdc_obj, SDC_CLOCK_IN);

	SDC_SendCommand(sdc_obj, 0, 0, sdc_response_type_none, sdc_data_transfer_none, FALSE, TRUE);

	SDC_SendCommand(sdc_obj, 8, 0x1a5, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
	
	if(GET_REG(REG_SDC_RESP0(sdc_obj->device_id)) == 0x1a5)
	{
		//sd2.0
	}
	
	Reg_Sdc_Ocr sdc_ocr = {0};
	
	//DELAY(10000);

	while(!sdc_ocr.bit.card_power_up_status)
	{
		sdc_ocr.bit.card_capacity_status = 1;
		SDC_SendAppCommand(sdc_obj, 41, sdc_ocr.dw/*0x40ff8000*/, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
		sdc_ocr.dw = GET_REG(REG_SDC_RESP0(sdc_obj->device_id));
	}
	
	sdc_obj->is_high_capacity = sdc_ocr.bit.card_capacity_status;
	
	SDC_SendCommand(sdc_obj, 2, 0, sdc_response_type_long, sdc_data_transfer_none, FALSE, FALSE);
	
	Reg_Sdc_Rca sdc_rca = {0};
	sdc_rca.dw = GET_REG(REG_SDC_RESP0(sdc_obj->device_id));
	
	while(sdc_rca.bit.current_state != sdc_card_status_stby)
	{
		//return;
		SDC_SendCommand(sdc_obj, 3, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
		sdc_rca.dw = GET_REG(REG_SDC_RESP0(sdc_obj->device_id));
	}

	sdc_obj->card_rca = sdc_rca.bit.relative_card_addr;
	
	SDC_SendCommand(sdc_obj, 9, sdc_obj->card_rca << 16, sdc_response_type_long, sdc_data_transfer_none, FALSE, FALSE);
	
	SDC_SendCommand(sdc_obj, 7, sdc_obj->card_rca << 16, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);

	SDC_SendCommand(sdc_obj, 16, sdc_obj->block_size, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);

	SET_REG(REG_SDC_BLKSIZ(sdc_obj->device_id), 0x8);
	SET_REG(REG_SDC_BYTCNT(sdc_obj->device_id), 0x8);

	SDC_SendAppCommand(sdc_obj, 51, 0, sdc_response_type_short, sdc_data_transfer_read, TRUE, FALSE);

	UINT32 data, reserved;
	data = GET_REG(REG_SDC_FIFO(sdc_obj->device_id));
	reserved = GET_REG(REG_SDC_FIFO(sdc_obj->device_id));

	SET_REG(REG_SDC_BLKSIZ(sdc_obj->device_id), sdc_obj->block_size);
	SET_REG(REG_SDC_BYTCNT(sdc_obj->device_id), sdc_obj->block_size);

		
	if(sdc_obj->card_width == sdc_cardWidth_1bit)
	{
		SDC_SendAppCommand(sdc_obj, 6, 0, sdc_response_type_short, sdc_data_transfer_none, TRUE, FALSE);
	}
	else if(sdc_obj->card_width == sdc_cardWidth_4bit)
	{
		SDC_SendAppCommand(sdc_obj, 6, 2, sdc_response_type_short, sdc_data_transfer_none, TRUE, FALSE);
	}

	//Card width
	SET_REG_M(REG_SDC_CTYPE(sdc_obj->device_id), sdc_obj->card_width, 0x1);

	SDC_UpdateClockRegister(sdc_obj, SDC_CLOCK_IN);

	//deselsect card
	//SDC_SendCommand(sdc_obj, 7, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
	
}

void SDCard_WriteBlocks(Sdc_Object* sdc_obj, UINT32* srcAddress, UINT32 desAddress, UINT32 blockCount)
{
	//select card
	//SDC_SendCommand(sdc_obj, 7, sdc_obj->card_rca << 16, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
	
	//fifo reset
	SET_REG_M(REG_SDC_CTRL(sdc_obj->device_id), 1<<1, 1<<1);
	
	UINT32 i;
	UINT32 toWhichBlock = 0;
	
//	for(i=0; i<blockCount; i++)
	{
		if(!sdc_obj->is_high_capacity)
		{
			toWhichBlock = desAddress + 512 * i;
		}
		else
		{
			toWhichBlock = (desAddress >> 8) + i;
		}
		
		
		//if(i==1)
		//{
			//DELAY(1000);
		//}
		
//		init idmac descriptor
		SDC_DmaDescriptorInit(sdc_obj);
		sdc_obj->dma_descriptors->desc0.bit.own = 1;
		sdc_obj->dma_descriptors->desc1.bit.buffer1_size = sdc_obj->block_size*2;
		sdc_obj->dma_descriptors->desc2.dw = (UINT32)srcAddress;
		SET_REG(REG_SDC_BYTCNT(sdc_obj->device_id), sdc_obj->block_size*2);
		
		//idmac enable
		SET_REG_M(REG_SDC_BMOD(sdc_obj->device_id), 1<<7, 1<<7);
		
		SDC_SendCommand(sdc_obj, 25, toWhichBlock, sdc_response_type_short, sdc_data_transfer_write, TRUE, FALSE);
		
		UINT32 rintStatus = 0;

		while(!( rintStatus & 0x8 ))
		{
			rintStatus = GET_REG(REG_SDC_RINTSTS(sdc_obj->device_id));
		}
		
		SDC_SendCommand(sdc_obj, 12, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, TRUE);
	}
	//deselsect card
	//SDC_SendCommand(sdc_obj, 7, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
}


void SDCard_WriteBlocksCPU(Sdc_Object* sdc_obj, UINT32* srcAddress, UINT32 desAddress, UINT32 blockCount)
{
	//select card
	//SDC_SendCommand(sdc_obj, 7, sdc_obj->card_rca << 16, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
	SET_REG_M(REG_SDC_CTRL(sdc_obj->device_id), 1<<1, 1<<1);

	UINT32 i,j;
	UINT32 toWhichBlock = 0;

	//for(i=0; i<blockCount; i++)
	{
		if(!sdc_obj->is_high_capacity)
		{
			toWhichBlock = desAddress + 512 * i;
		}
		else
		{
			toWhichBlock = (desAddress >>8) + i;
		}

		//DELAY(100000);

		SET_REG(REG_SDC_BYTCNT(sdc_obj->device_id), sdc_obj->block_size*6);

		SDC_SendCommand(sdc_obj, 25, toWhichBlock, sdc_response_type_short, sdc_data_transfer_write, TRUE, FALSE);



		for (j=0; j<(sdc_obj->block_size >>2) * blockCount; j++)
		{

			UINT32 fifoStatus = 0x8;

			while(fifoStatus & 0x8)
			{
				fifoStatus = GET_REG(REG_SDC_STATUS(sdc_obj->device_id));
			}

			SET_REG(REG_SDC_FIFO(sdc_obj->device_id), *srcAddress++);
			//DELAY(1000);
		}

		UINT32 rintStatus = 0;

		while(!( rintStatus & 0x8 ))
		{
			rintStatus = GET_REG(REG_SDC_RINTSTS(sdc_obj->device_id));
		}

		SDC_SendCommand(sdc_obj, 12, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, TRUE);

	}
	//SDC_SendCommand(sdc_obj, 12, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, TRUE);
	//deselsect card
	//SDC_SendCommand(sdc_obj, 7, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);

}

void SDCard_ReadBlocks(Sdc_Object* sdc_obj, UINT32 srcAddress, UINT32* desAddress, UINT32 blockCount)
{
	//select card
	//SDC_SendCommand(sdc_obj, 7, sdc_obj->card_rca << 16, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
	
	//fifo reset
	SET_REG_M(REG_SDC_CTRL(sdc_obj->device_id), 1<<1, 1<<1);
	
	UINT32 i;
	UINT32 fromWhichBlock = 0;
	
	for(i=0; i<blockCount; i++)
	{
		
		if(!sdc_obj->is_high_capacity)
		{
			fromWhichBlock = srcAddress + i * 512;
		}
		else
		{
			fromWhichBlock = (srcAddress >>8) + i;
		}
		

//		init idmac descriptor
		SDC_DmaDescriptorInit(sdc_obj);
		
		sdc_obj->dma_descriptors->desc0.bit.own = 1;
		sdc_obj->dma_descriptors->desc1.bit.buffer1_size = sdc_obj->block_size;
		sdc_obj->dma_descriptors->desc2.dw = (UINT32)desAddress + i * sdc_obj->block_size;
		SET_REG(REG_SDC_BYTCNT(sdc_obj->device_id), sdc_obj->block_size);
		
		
		
		//idmac enable
		SET_REG_M(REG_SDC_BMOD(sdc_obj->device_id), 1<<7, 1<<7);
		
		SDC_SendCommand(sdc_obj, 18, fromWhichBlock, sdc_response_type_short, sdc_data_transfer_read, TRUE, FALSE);

		UINT32 rintStatus = 0;

		while(!( rintStatus & 0x8 ))
		{
			rintStatus = GET_REG(REG_SDC_RINTSTS(sdc_obj->device_id));
		}


		SDC_SendCommand(sdc_obj, 12, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, TRUE);
	}
	
	//deselsect card
	//SDC_SendCommand(sdc_obj, 7, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
}

void SDCard_ReadBlocksCPU(Sdc_Object* sdc_obj, UINT32 srcAddress, UINT32* desAddress, UINT32 blockCount)
{
	//select card
	//SDC_SendCommand(sdc_obj, 7, sdc_obj->card_rca << 16, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);

	SET_REG_M(REG_SDC_CTRL(sdc_obj->device_id), 1<<1, 1<<1);

	UINT32 i,j;
	UINT32 fromWhichBlock = 0;

	for(i=0; i<blockCount; i++)
	{

		if(!sdc_obj->is_high_capacity)
		{
			fromWhichBlock = srcAddress + i * 512;
		}
		else
		{
			fromWhichBlock = (srcAddress >>8) + i;
		}

		SET_REG(REG_SDC_BYTCNT(sdc_obj->device_id), sdc_obj->block_size);

		SDC_SendCommand(sdc_obj, 18, fromWhichBlock, sdc_response_type_short, sdc_data_transfer_read, TRUE, FALSE);


		for (j=0; j<(sdc_obj->block_size >>2); j++)
		{
			/*
			tempSdcardModule.status = sdc_obj->sdc_module->status;
			while(tempSdcardModule.status.bit.fifo_empty)
			{
				tempSdcardModule.status = sdc_obj->sdc_module->status;
			}
			*/

			UINT32 fifoStatus = 0x4;

			while(fifoStatus & 0x4)
			{
				fifoStatus = GET_REG(REG_SDC_STATUS(sdc_obj->device_id));
			}

			*desAddress++ = GET_REG(REG_SDC_FIFO(sdc_obj->device_id));
			//DELAY(1000);
		}

		/*
		 * In non-DMA mode, while reading from a card,
		 * the Data Transfer Over (RINTSTS[3]) interrupt occurs as soon as
		 * the data transfer from the card is over. There still could be some
		 * data left in the FIFO, and the RX_WMark interrupt may or may not occur,
		 * depending on the remaining bytes in the FIFO.
		 * Software should read any remaining bytes upon seeing
		 * the Data Transfer Over (DTO) interrupt.
		 */
		UINT32 rintStatus = 0;

		while(!( rintStatus & 0x8 ))
		{
			rintStatus = GET_REG(REG_SDC_RINTSTS(sdc_obj->device_id));
		}

		SDC_SendCommand(sdc_obj, 12, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, TRUE);
	}

	//deselsect card
	//SDC_SendCommand(sdc_obj, 7, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);

}

void SDCard_ReadBlocksPeter(Sdc_Object* sdc_obj, UINT32 srcAddress, UINT32* desAddress, UINT32 blockCount)
{
	//select card
	SDC_SendCommand(sdc_obj, 7, sdc_obj->card_rca << 16, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);

	//fifo reset
	SET_REG_M(REG_SDC_CTRL(sdc_obj->device_id), 1<<1, 1<<1);

	UINT32 i;
	UINT32 fromWhichBlock = 0;

	for(i=0; i<blockCount; i++)
	{

		if(!sdc_obj->is_high_capacity)
		{
			fromWhichBlock = srcAddress + i * 512;
		}
		else
		{
			fromWhichBlock = (srcAddress >>8) + i;
		}


//		init idmac descriptor
		SDC_DmaDescriptorInit(sdc_obj);

		sdc_obj->dma_descriptors->desc0.bit.own = 1;
		sdc_obj->dma_descriptors->desc1.bit.buffer1_size = sdc_obj->block_size;
		sdc_obj->dma_descriptors->desc2.dw = (UINT32)desAddress + i * sdc_obj->block_size;
		SET_REG(REG_SDC_BYTCNT(sdc_obj->device_id), sdc_obj->block_size);



		//idmac enable
		SET_REG_M(REG_SDC_BMOD(sdc_obj->device_id), 1<<7, 1<<7);

		SDC_SendCommand(sdc_obj, 18, fromWhichBlock, sdc_response_type_short, sdc_data_transfer_read, TRUE, FALSE);

		UINT32 rintStatus = 0;

		while(!( rintStatus & 0x8 ))
		{
			rintStatus = GET_REG(REG_SDC_RINTSTS(sdc_obj->device_id));
		}


		SDC_SendCommand(sdc_obj, 12, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, TRUE);
	}

	//deselsect card
	//SDC_SendCommand(sdc_obj, 7, 0, sdc_response_type_short, sdc_data_transfer_none, FALSE, FALSE);
}
